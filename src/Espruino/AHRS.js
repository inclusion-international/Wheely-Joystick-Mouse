// AHRS.js - AHRS module for Puck.js without Magnetometer
// Calculates Roll, Pitch and relative Yaw from accelerometer and gyroscope data
// Usage: 
// var AHRS = require("AHRS"); when loaded onto Puck.js into the storage.
// or require("https://inclusion-international.github.io/Wheely-Joystick-Mouse/src/Espruino/AHRS.js") to directly fetch the URL from the Internet.

// Based on Madgwick's AHRS algorithm but simplified for Puck.js (no magnetometer, basic complementary filter approach)
// Author: Generated by Mistral.ai and manually modified by Martin Deinhofer

// Accelerometer (tilt) handling
//require("puckjsv2-accel-tilt").on();
// turn off with require("puckjsv2-accel-tilt").off();

var AHRS = (function () {
    // Private Variables
    var roll = 0, pitch = 0, yaw = 0;
    var lastTime = 0;
    var sampleRate = 12.5; // Hz

    // Sensor-Offsets
    var accelOffset = { x: 0, y: 0, z: 0 };
    var gyroOffset = { x: 0, y: 0, z: 0 };

    // Initialisierung
    function init() {
        // Turn on accelerometer
        console.log("Initializing AHRS...");
        Puck.accelOn(sampleRate);

        // Sensor data subscription
        Puck.on('accel', function (accel) {
            update(accel);
        });

        lastTime = getTime();
    }

    // Sensor data update
    function update(acc) {
        var now = getTime();
        var dt = (now - lastTime) / 1000;
        lastTime = now;

        accel = acc["acc"];
        gyro = acc["gyro"];

        if (accel) {
            // Correct accelerometer values
            accel.x -= accelOffset.x;
            accel.y -= accelOffset.y;
            accel.z -= accelOffset.z;

            // Roll & Pitch from accelerometer (simple)
            roll = Math.atan2(accel.y, accel.z);
            pitch = Math.atan2(-accel.x, Math.sqrt(accel.y * accel.y + accel.z * accel.z));
        }

        if (gyro) {
            // Gyro drift compensation (simple)
            gyro.x -= gyroOffset.x;
            gyro.y -= gyroOffset.y;
            gyro.z -= gyroOffset.z;

            // Update roll, pitch and yaw with gyro data
            roll += gyro.x * dt;
            pitch += gyro.y * dt;
            yaw += gyro.z * dt;
        }
        //console.log("Roll:", roll, "Pitch:", pitch, "Yaw:", yaw);
    }

    // Return Current orientation (in Radians)
    function getOrientation() {
        return {
            roll: roll,
            pitch: pitch,
            yaw: yaw // Relative Yaw (can drift!)
        };
    }

    // Return Current orientation (in Degrees)
    function getOrientationDegree() {
        return {
            roll: (roll * 180 / Math.PI),
            pitch: (pitch * 180 / Math.PI),
            yaw: (yaw * 180 / Math.PI) // Relative Yaw (can drift!)
        };
    }

    // Public API
    return {
        init: init,
        getOrientation: getOrientation,
        getOrientationDegree: getOrientationDegree,
    };
})();


// Export for require()
exports = AHRS;
